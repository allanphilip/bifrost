{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2022-07-19T11:37:36.194Z",
    "end": "2022-07-19T11:38:01.039Z",
    "duration": 24845,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "55f1576b-c275-40ee-8668-7da71bf8d21f",
      "title": "",
      "fullFile": "C:\\Users\\THI2201882\\source\\BiFrost\\tests\\FPS.spec.js",
      "file": "\\tests\\FPS.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f18e39db-01ce-495d-bf55-2541ab051e15",
          "title": "Workday API Automation",
          "fullFile": "C:\\Users\\THI2201882\\source\\BiFrost\\tests\\FPS.spec.js",
          "file": "\\tests\\FPS.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Scenario10",
              "fullTitle": "Workday API Automation Scenario10",
              "timedOut": false,
              "duration": 14942,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const FPS1response = await FPS1_Build_Json(\n  FPSTestData['1_homestore'],\n  FPSTestData['1_source'],\n  FPSTestData['1_country']\n)\nstrfirst_name = FPS1response.first_name\n/****Post Request****/\nconst response = await postRequest(\n  Common.URL.FPS,\n  FPS_endpoint,\n  headers,\n  JSON.stringify(FPS1response)\n)\nexpect(response.status).to.oneOf([201, 200],\"Check person uuids are generated successfully\")\nexpect(response.body).not.to.be.empty\nif (response.status == '201' || response.status == '200') {\n  response_Value = response.body\n  //console.log(response_Value)\n  console.log('1 Create person - FPS completed')\n  //let entity = 'email'\n  let entity_id = response.body.email\n  /*********************************End Points generated through FPS ID************************************/\n  let FPS2_endpoint =\n    FPS_endpoint +\n    '/' +\n    response.body.person_uuid +\n    '/restricted'\n  let FPS3_endpoint =\n    FPS_endpoint + '/' + response.body.person_uuid\n  let FPS8_endpoint =\n    FPS_endpoint + '/' + response.body.person_uuid + '/tx'\n  /* **************************2 Get Person restricted details-p1****************************************/\n  /****Get Request****/\n  await sleep(2000);\n  const response2 = await getRequest(\n    Common.URL.FPS,\n    FPS2_endpoint,\n    headers\n  )\n  console.log(response2.text)\n  console.log(response2.body)\n  expect(response2.statusCode).to.be.oneOf([201, 200])\n  expect(response2.body.createdAt).not.to.be.null\n  expect(response2.body.first_name).to.be.equal( response.body.first_name,\"Verify the first name\");\n  expect(response2.body.last_name).to.be.equal( response.body.last_name,\"Verify the last name\");\n  expect(response2.body.email).to.be.equal( response.body.email,\"Verify email\");\n  expect(response2.body.person_uuid).to.be.equal( response.body.person_uuid,\" Check the person uuid is \");\n  expect(response2.body.home_store).to.be.equal( response.body.home_store,\" Verify the home store \");\n  for(var index=0; index < response.body.aliases.length; index++)\n  {\n  for(var i=0; i < response2.body.aliases.length; i++) \n  {\n    if (response2.body.aliases[i].source_id == response.body.aliases[index].source_id)\n        {\n          expect(response2.body.aliases[i].source).to.be.equal(response.body.aliases[index].source,\"Check the source value\");\n          expect(response2.body.aliases[i].source_id).to.be.equal(response.body.aliases[index].source_id,\"Check the source_id value\");\n          break;\n        }\n  }\n}\n  if (response2.status == '201' || response2.status == '200') {\n     console.log('2-Get Person restricted details-p1 completed')\n    /* ***************************3 update a person in fps Copy********************************************/\n    const FPS3response = await FPS3_Build_Json(\n      response2.body.person_uuid,\n      response2.body.first_name,\n      response2.body.aliases[0].source_id,\n      FPSTestData['3_homestore'], //update from TestData.json with homestore1\n      response2.body.aliases[0].source,\n      FPSTestData['3_country']\n    )\n    /****Patch Request****/\n    const response3 = await patchRequest(\n      Common.URL.FPS,\n      FPS3_endpoint,\n      headers,\n      JSON.stringify(FPS3response)\n    )\n    \n   // console.log(response3.body)\n    expect(response3.statusCode).to.be.oneOf([201, 200])\n    if (response3.status == '201' || response3.status == '200') {\n      console.log('3 update a person in fps Copy completed')\n     // response_Value = response3.body\n      //console.log(response_Value)\n      /* ***************************4 Get Person restricted aliases-p2********************************************/\n      /****Get Request****/\n      const response4 = await getRequest(\n        Common.URL.FPS,\n        FPS2_endpoint,\n        headers\n      )\n     \n      expect(response4.statusCode).to.be.oneOf([201, 200])\n      expect(response4.body.createdAt).not.to.be.null\n      if ((response4.statusCode == '200') | (response4.statusCode == '201')) {\n        expect(response4.body.createdAt).not.to.be.null\n        expect(response4.body.first_name).to.be.equal( response3.body.first_name,\"Check the updated first name\");\n        expect(response4.body.last_name).to.be.equal( response3.body.last_name,\"Check the updated last name\");\n       // expect(response4.body.preference.global.country).to.be.equal(FPSTestData['3_country'],\"Check the updated country value\");\n      // expect(response4.body.preference.global.language).to.be.equal( response3.body.preference.global.language,\" Check the updated language value\");\n        expect(response4.body.person_uuid).to.be.equal( response3.body.person_uuid,\" Check the person uuid \");\n        for(var index2=0; i2 < response3.body.aliases.length; index2++) \n        {\n        for(var i2=0; i2 < response4.body.aliases.length; i2++) \n        {\n          \n          if (response4.body.aliases[i2].source_id == response3.body.aliases[index2].source_id)\n              {\n                expect(response4.body.aliases[i2].source).to.be.equal(response3.body.aliases[index2].source,\"Check the updated source value\");\n                expect(response4.body.aliases[i2].source_id).to.be.equal(response3.body.aliases[index2].source_id,\"Check the updated source_id value\");\n                break;\n              }\n        }\n      }\n        console.log('4 Get Person restricted aliases-p2 Completed')\n        /* ***************************5 POST person event SUBSCRIBED - source: Newsletter Copy 2********************************************/\n      }\n      let entity_id\n      if (FPSTestData['5_entity'] == 'email') {\n        entity_id = response4.body.email\n      } else {\n        entity_id = FPSTestData['5_entity_id']\n      }\n      const FPS5response = FPS5_Build_Json(\n        response4.body.person_uuid,\n        FPSTestData['5_entity'], //email or SMS from test data.json\n        entity_id, //email id from previous reponse\n        FPSTestData['5_source']\n      )\n      /****Post Request****/\n      const response5 = await postRequest(\n        Common.URL.FPS,\n        FPS5_endpoint, //https://preprod.fps.aesopdigital.io/v1/person/events\n        headers,\n        JSON.stringify(FPS5response)\n      )\n      \n      expect(response5.statusCode).to.be.oneOf([201, 200, 202])\n      if (\n        response5.status == '201' ||\n        response5.status == '200' ||\n        response5.status == '202'\n      ) {\n        expect(response5.body.entity).to.be.equal( FPSTestData['5_entity'],\"Check the updated entity\" + FPSTestData['5_entity']);\n        expect(response5.body.entity_id).to.be.equal( entity_id,\"Check the updated entity id\" + entity_id);\n        expect(response5.body.source).to.be.equal( FPSTestData['5_source'],\"Check the updated entity id\" + FPSTestData['5_source']);\n        console.log('5 POST person event SUBSCRIBED completed')\n       \n        await sleep(2000);\n        /* **************************6 Get Person restricted optins-p3****************************************/\n        /****Get Request****/\n        const response6 = await getRequest(\n          Common.URL.FPS,\n          FPS2_endpoint,\n          headers\n        )\n        //console.log(response6.text)\n        expect(response6.status).to.be.oneOf([201, 200, 202])\n        expect(response6.body.createdAt).not.to.be.null\n        if (\n          response6.status == '201' ||\n          response6.status == '200' ||\n          response6.status == '202'\n        ) {\n         \n          expect(response6.body.optins[FPSTestData['5_entity']][0].id).to.be.equal( entity_id,\"Check the updated entity id\" + entity_id);\n        \n          console.log('6 Get Person restricted optins-p3 completed')\n          /**********************************7a create a new tx currency Hybris single item order************************************ */\n          if (FPSTestData['transaction'] == 'TxnItem 1') {\n             FPS7response = FPS7A_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          } else if (FPSTestData['transaction'] == 'TxnItem 2') {\n          /**********************************7b create a new tx currency Hybris 2 item order************************************ */\n             FPS7response = FPS7B_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          } else {\n            /**********************************7 create a new tx in fps-Hybris************************************ */\n             FPS7response = FPS7_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          }\n          //Write a file to JSON\n          const response7 = await postRequest(\n            Common.URL.FPS,\n            FPS7_endpoint,\n            headers,\n            JSON.stringify(FPS7response)\n          )\n          console.log(response7.body);\n          expect(response7.statusCode).to.be.oneOf(\n            [201, 200],\n            'Sucessfully created person for FPS'\n          )\n          expect(response7.body.createdAt).not.to.be.null\n          if (\n            response7.status == '201' ||\n            response7.status == '200' ||\n            response7.status == '202'\n          ) {\n        expect(response7.body.sbs_no).to.be.equal( FPSTestData['7_sbs_no'],\"Check the updated sbs_no\");\n        expect(response7.body.store_no).to.be.equal( FPSTestData['7_store_no'],\"Check the updated store_no\");\n        expect(response7.body.status).to.be.equal( FPSTestData['7_status'],\"Check the updated status\");\n\n            console.log('7 create a new tx in fps-Hybris completed')\n            \n            /*let new_source_tx_id = response7.body.source_tx_id\n            let new_shipping_method = response7.body.shipping_method\n           */\n           /*************************************8 Returns the list of transaction related to a person**************** */\n            /****Get Request****/\n            const response8 = await getRequest(\n              Common.URL.FPS,\n              FPS8_endpoint,\n              headers\n            )\n            \n            expect(response8.statusCode).to.be.oneOf([201, 200])\n            expect(response8.body.createdAt).not.to.be.null\n            if (response8.statusCode == '200' || response8.statusCode == '201') {\n             \n              expect(response7.body.person_uuid).to.be.equal( response8.body[0].person_uuid,\"Check the person_uuid or fpd_is\");\n              expect(response7.body.tx_uuid).to.be.equal( response8.body[0].tx_uuid,\"Check the updated store_no\");\n              expect(response7.body.sbs_no).to.be.equal( response8.body[0].sbs_no,\"Check the updated sbs_no\");\n              expect(response7.body.store_no).to.be.equal( response8.body[0].store_no,\"Check the store_no\");\n              expect(response7.body.currency).to.be.equal( response8.body[0].currency,\"Check the updated currency\");\n              expect(response7.body.total_cost_aud).to.be.equal( response8.body[0].total_cost_aud,\"Check the updated total_cost_aud\");\n              expect(response7.body.status).to.be.equal( response8.body[0].status,\"Check the status\");\n              expect(response7.body.order_total).to.be.equal( response8.body[0].order_total,\"Check the order_total\");\n              \n              console.log(\n                '8 Returns the list of transaction related to a person-Completed'\n              )\n             \n              /*************************************10 Create transaction-PartialCancel**************** */\n                \n              let FPS10_endpoint =\n                '/transaction/by-source' +\n                '/' +\n                response8.body[0].source +\n                '/' +\n                response8.body[0].source_tx_id\n                  /**********************************10a create a new tx currency Hybris single item order************************************ */\n          if (FPSTestData['transaction'] == 'TxnItem 1') {\n             FPS10response = FPS10A_Build_Json(\n              response8.body[0].person_uuid,\n              FPSTestData['10_newsbs_no'],\n              FPSTestData['10_newstore_no'],\n              FPSTestData['10_newsource'],\n              response8.body[0].source_tx_id,\n              response8.body[0].tx_uuid,\n              FPSTestData['10_newcurrency'],\n              FPSTestData['10_newstatus'],\n              FPSTestData['10_isgift'],\n              FPSTestData['10_taxtype'],\n              response8.body[0].total_cost_aud\n            )\n          } else if (FPSTestData['transaction'] == 'TxnItem 2') {\n          /**********************************10b create a new tx currency Hybris 2 item order************************************ */\n           FPS10response = FPS10B_Build_Json(\n            response8.body[0].person_uuid,\n            FPSTestData['10_newsbs_no'],\n            FPSTestData['10_newstore_no'],\n            FPSTestData['10_newsource'],\n            response8.body[0].source_tx_id,\n            response8.body[0].tx_uuid,\n            FPSTestData['10_newcurrency'],\n            FPSTestData['10_newstatus'],\n            FPSTestData['10_isgift'],\n            FPSTestData['10_taxtype'],\n            response8.body[0].total_cost_aud\n          )\n          \n          } \n          else{\n             FPS10response = FPS10_Build_Json(\n              response8.body[0].person_uuid,\n              FPSTestData['10_newsbs_no'],\n              FPSTestData['10_newstore_no'],\n              FPSTestData['10_newsource'],\n              response8.body[0].source_tx_id,\n              response8.body[0].tx_uuid,\n              FPSTestData['10_newcurrency'],\n              FPSTestData['10_newstatus'],\n              FPSTestData['10_isgift'],\n              FPSTestData['10_qty'],\n              FPSTestData['10_taxtype'],\n              response8.body[0].total_cost_aud\n            )\n          }\n          console.log(FPS10response)\n          await sleep(2000);\n              const response10 = await patchRequest(\n                Common.URL.FPS,\n                FPS10_endpoint,\n                headers,\n                JSON.stringify(FPS10response)\n              )\n             \n              console.log(response10.text)\n              expect(response10.statusCode).to.be.oneOf([201, 200,202])\n              expect(response10.body.createdAt).not.to.be.null\n              if (\n                response10.statusCode == '200' ||\n                response10.statusCode == '201'||\n                response10.statusCode == '202'\n              ) {\n                console.log(\n                  '10 Create transaction-PartialCancel-Completed'\n                )\n                /*************************************11 Get the updated partial values**************** */\n                let FPS11_endpoint =\n                  '/transaction' + '/' + response8.body[0].tx_uuid\n                \n                const response11 = await getRequest(\n                  Common.URL.FPS,\n                  FPS11_endpoint,\n                  headers\n                )\n               \n                expect(response11.statusCode).to.be.oneOf([201, 200])\n                expect(response11.body.createdAt).not.to.be.null\n                if (\n                  response11.statusCode == '200' ||\n                  response11.statusCode == '201'\n                ) {\n                  console.log(response11.body);\n                  for (var index3=0 ; index3 < FPS10response.lines.length; index3++)\n                  {\n                  for (var i3 = 0; i3 < response11.body.lines.length; i3++)\n                  {   \n                    if  (response11.body.lines[i3].sku  == FPS10response.lines[index3].sku)\n                    {\n                    expect(response11.body.lines[i3].sku).to.be.equal(FPS10response.lines[index3].sku,\"Verify the cancelled SKU \");\n                    expect(response11.body.lines[i3].cancelled[0].shipping_cancelled).to.be.equal( FPS10response.lines[index3].cancelled[0].shipping_cancelled,\"Verify shipping_cancelled\");\n                    expect(response11.body.lines[i3].cancelled[0].qty_cancelled).to.be.equal( FPS10response.lines[index3].cancelled[0].qty_cancelled,\"Verify qty_cancelled\");\n                    break;\n                  }\n                  }\n                  }\n                  expect(response11.body.status).to.be.equal( FPSTestData['10_newstatus'],\"Verify the status value\");\n                  expect(response11.body.payments.length ).to.be.greaterThan( 0,\"Verify the payment type greater than 0\");\n                  expect(response11.body.sbs_no).to.be.equal( FPSTestData['10_newsbs_no'],\"Verify the sbs_no\");\n                  expect(response11.body.store_no).to.be.equal( FPSTestData['10_newstore_no'],\"Verify the store_no \");\n                  expect(response11.body.tx_uuid).to.be.equal( response8.body[0].tx_uuid,\"Verify the tx_uuid value\");\n                  \n                 \n                  console.log(\n                    '11 Get the updated partial values-completed'\n                  )\n                  \n                  /*************************************12 POST person event UNSUBSCRIBED - source:**************** */\n                  const FPS12response = FPS12_Build_Json(\n                    response11.body.person_uuid,\n                    FPSTestData['5_entity'],\n                    entity_id,\n                    response11.body.source\n                  )\n                  let FPS12_endpoint = '/person/events'\n                  const response12 = await postRequest(\n                    Common.URL.FPS,\n                    FPS12_endpoint,\n                    headers,\n                    JSON.stringify(FPS12response)\n                  )\n                  \n                  expect(response12.statusCode).to.be.oneOf([201, 200, 202])\n                  expect(response12.body.createdAt).not.to.be.null\n                  if (\n                    response12.statusCode == '200' ||\n                    response12.statusCode == '201' ||\n                    response12.statusCode == '202'\n                  ) {\n                    console.log(\n                      '12 POST person event UNSUBSCRIBED - source  completed'\n                    )\n                    /*************************************13 Get Person restricted optins details-false**************** */\n                    const response13 = await getRequest(\n                      Common.URL.FPS,\n                      FPS2_endpoint,\n                      headers\n                    )\n                    expect(response13.statusCode).to.be.oneOf([\n                      201,\n                      200\n                    ])\n                    expect(response13.body.createdAt).not.to.be.null\n                    if (\n                      response13.status == '201' ||\n                      response2.status == '200'\n                    ) {\n                      response_Value = response13.body\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].id).to.be.equal(response12.body.entity_id,\"Verify the optins id value exists\");\n                     // expect(response13.body.optins[FPSTestData['5_entity']][0].status).to.be.equal(false,\"Verify the optins status\");\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].reason).to.be.equal( response12.body.payload.reason,\"Verify the optins reason\");\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].last_modified_source).to.be.equal( response12.body.source,\"VVerify the optins last_modified_source \");\n                      \n                      console.log(\n                        '13 Get Person restricted optins details-false-completed'\n                      )\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
              "err": {},
              "uuid": "ff6e3adb-e736-43f5-b555-29c44b1ffdb4",
              "parentUUID": "f18e39db-01ce-495d-bf55-2541ab051e15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Scenario11",
              "fullTitle": "Workday API Automation Scenario11",
              "timedOut": false,
              "duration": 9868,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const FPS1response = await FPS1_Build_Json(\n  FPSTestData['1_homestore'],\n  FPSTestData['1_source'],\n  FPSTestData['1_country']\n)\nstrfirst_name = FPS1response.first_name\n/****Post Request****/\nconst response = await postRequest(\n  Common.URL.FPS,\n  FPS_endpoint,\n  headers,\n  JSON.stringify(FPS1response)\n)\nexpect(response.status).to.oneOf([201, 200],\"Check person uuids are generated successfully\")\nexpect(response.body).not.to.be.empty\nif (response.status == '201' || response.status == '200') {\n  response_Value = response.body\n  //console.log(response_Value)\n  console.log('1 Create person - FPS completed')\n  //let entity = 'email'\n  let entity_id = response.body.email\n  /*********************************End Points generated through FPS ID************************************/\n  let FPS2_endpoint =\n    FPS_endpoint +\n    '/' +\n    response.body.person_uuid +\n    '/restricted'\n  let FPS3_endpoint =\n    FPS_endpoint + '/' + response.body.person_uuid\n  let FPS8_endpoint =\n    FPS_endpoint + '/' + response.body.person_uuid + '/tx'\n  /* **************************2 Get Person restricted details-p1****************************************/\n  /****Get Request****/\n  await sleep(2000);\n  const response2 = await getRequest(\n    Common.URL.FPS,\n    FPS2_endpoint,\n    headers\n  )\n  console.log(response2.text)\n  console.log(response2.body)\n  expect(response2.statusCode).to.be.oneOf([201, 200])\n  expect(response2.body.createdAt).not.to.be.null\n  expect(response2.body.first_name).to.be.equal( response.body.first_name,\"Verify the first name\");\n  expect(response2.body.last_name).to.be.equal( response.body.last_name,\"Verify the last name\");\n  expect(response2.body.email).to.be.equal( response.body.email,\"Verify email\");\n  expect(response2.body.person_uuid).to.be.equal( response.body.person_uuid,\" Check the person uuid is \");\n  expect(response2.body.home_store).to.be.equal( response.body.home_store,\" Verify the home store \");\n  for(var index=0; index < response.body.aliases.length; index++)\n  {\n  for(var i=0; i < response2.body.aliases.length; i++) \n  {\n    if (response2.body.aliases[i].source_id == response.body.aliases[index].source_id)\n        {\n          expect(response2.body.aliases[i].source).to.be.equal(response.body.aliases[index].source,\"Check the source value\");\n          expect(response2.body.aliases[i].source_id).to.be.equal(response.body.aliases[index].source_id,\"Check the source_id value\");\n          break;\n        }\n  }\n}\n  if (response2.status == '201' || response2.status == '200') {\n     console.log('2-Get Person restricted details-p1 completed')\n    /* ***************************3 update a person in fps Copy********************************************/\n    const FPS3response = await FPS3_Build_Json(\n      response2.body.person_uuid,\n      response2.body.first_name,\n      response2.body.aliases[0].source_id,\n      FPSTestData['3_homestore'], //update from TestData.json with homestore1\n      response2.body.aliases[0].source,\n      FPSTestData['3_country']\n    )\n    /****Patch Request****/\n    const response3 = await patchRequest(\n      Common.URL.FPS,\n      FPS3_endpoint,\n      headers,\n      JSON.stringify(FPS3response)\n    )\n    \n   // console.log(response3.body)\n    expect(response3.statusCode).to.be.oneOf([201, 200])\n    if (response3.status == '201' || response3.status == '200') {\n      console.log('3 update a person in fps Copy completed')\n     // response_Value = response3.body\n      //console.log(response_Value)\n      /* ***************************4 Get Person restricted aliases-p2********************************************/\n      /****Get Request****/\n      const response4 = await getRequest(\n        Common.URL.FPS,\n        FPS2_endpoint,\n        headers\n      )\n     \n      expect(response4.statusCode).to.be.oneOf([201, 200])\n      expect(response4.body.createdAt).not.to.be.null\n      if ((response4.statusCode == '200') | (response4.statusCode == '201')) {\n        expect(response4.body.createdAt).not.to.be.null\n        expect(response4.body.first_name).to.be.equal( response3.body.first_name,\"Check the updated first name\");\n        expect(response4.body.last_name).to.be.equal( response3.body.last_name,\"Check the updated last name\");\n       // expect(response4.body.preference.global.country).to.be.equal(FPSTestData['3_country'],\"Check the updated country value\");\n      // expect(response4.body.preference.global.language).to.be.equal( response3.body.preference.global.language,\" Check the updated language value\");\n        expect(response4.body.person_uuid).to.be.equal( response3.body.person_uuid,\" Check the person uuid \");\n        for(var index2=0; i2 < response3.body.aliases.length; index2++) \n        {\n        for(var i2=0; i2 < response4.body.aliases.length; i2++) \n        {\n          \n          if (response4.body.aliases[i2].source_id == response3.body.aliases[index2].source_id)\n              {\n                expect(response4.body.aliases[i2].source).to.be.equal(response3.body.aliases[index2].source,\"Check the updated source value\");\n                expect(response4.body.aliases[i2].source_id).to.be.equal(response3.body.aliases[index2].source_id,\"Check the updated source_id value\");\n                break;\n              }\n        }\n      }\n        console.log('4 Get Person restricted aliases-p2 Completed')\n        /* ***************************5 POST person event SUBSCRIBED - source: Newsletter Copy 2********************************************/\n      }\n      let entity_id\n      if (FPSTestData['5_entity'] == 'email') {\n        entity_id = response4.body.email\n      } else {\n        entity_id = FPSTestData['5_entity_id']\n      }\n      const FPS5response = FPS5_Build_Json(\n        response4.body.person_uuid,\n        FPSTestData['5_entity'], //email or SMS from test data.json\n        entity_id, //email id from previous reponse\n        FPSTestData['5_source']\n      )\n      /****Post Request****/\n      const response5 = await postRequest(\n        Common.URL.FPS,\n        FPS5_endpoint, //https://preprod.fps.aesopdigital.io/v1/person/events\n        headers,\n        JSON.stringify(FPS5response)\n      )\n      \n      expect(response5.statusCode).to.be.oneOf([201, 200, 202])\n      if (\n        response5.status == '201' ||\n        response5.status == '200' ||\n        response5.status == '202'\n      ) {\n        expect(response5.body.entity).to.be.equal( FPSTestData['5_entity'],\"Check the updated entity\" + FPSTestData['5_entity']);\n        expect(response5.body.entity_id).to.be.equal( entity_id,\"Check the updated entity id\" + entity_id);\n        expect(response5.body.source).to.be.equal( FPSTestData['5_source'],\"Check the updated entity id\" + FPSTestData['5_source']);\n        console.log('5 POST person event SUBSCRIBED completed')\n       \n        await sleep(2000);\n        /* **************************6 Get Person restricted optins-p3****************************************/\n        /****Get Request****/\n        const response6 = await getRequest(\n          Common.URL.FPS,\n          FPS2_endpoint,\n          headers\n        )\n        //console.log(response6.text)\n        expect(response6.status).to.be.oneOf([201, 200, 202])\n        expect(response6.body.createdAt).not.to.be.null\n        if (\n          response6.status == '201' ||\n          response6.status == '200' ||\n          response6.status == '202'\n        ) {\n         \n          expect(response6.body.optins[FPSTestData['5_entity']][0].id).to.be.equal( entity_id,\"Check the updated entity id\" + entity_id);\n        \n          console.log('6 Get Person restricted optins-p3 completed')\n          /**********************************7a create a new tx currency Hybris single item order************************************ */\n          if (FPSTestData['transaction'] == 'TxnItem 1') {\n             FPS7response = FPS7A_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          } else if (FPSTestData['transaction'] == 'TxnItem 2') {\n          /**********************************7b create a new tx currency Hybris 2 item order************************************ */\n             FPS7response = FPS7B_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          } else {\n            /**********************************7 create a new tx in fps-Hybris************************************ */\n             FPS7response = FPS7_Build_Json(\n              response6.body.person_uuid,\n              FPSTestData['7_sbs_no'],\n              FPSTestData['7_store_no'],\n              FPSTestData['7_newsource'],\n              FPSTestData['7_currency'],\n              FPSTestData['7_shipping_method'],\n              FPSTestData['7_status'],\n              FPSTestData['7_tax_type'],\n              FPSTestData['7_payment_method']\n            )\n          }\n          //Write a file to JSON\n          const response7 = await postRequest(\n            Common.URL.FPS,\n            FPS7_endpoint,\n            headers,\n            JSON.stringify(FPS7response)\n          )\n          console.log(response7.body);\n          expect(response7.statusCode).to.be.oneOf(\n            [201, 200],\n            'Sucessfully created person for FPS'\n          )\n          expect(response7.body.createdAt).not.to.be.null\n          if (\n            response7.status == '201' ||\n            response7.status == '200' ||\n            response7.status == '202'\n          ) {\n        expect(response7.body.sbs_no).to.be.equal( FPSTestData['7_sbs_no'],\"Check the updated sbs_no\");\n        expect(response7.body.store_no).to.be.equal( FPSTestData['7_store_no'],\"Check the updated store_no\");\n        expect(response7.body.status).to.be.equal( FPSTestData['7_status'],\"Check the updated status\");\n\n            console.log('7 create a new tx in fps-Hybris completed')\n            \n            /*let new_source_tx_id = response7.body.source_tx_id\n            let new_shipping_method = response7.body.shipping_method\n           */\n           /*************************************8 Returns the list of transaction related to a person**************** */\n            /****Get Request****/\n            const response8 = await getRequest(\n              Common.URL.FPS,\n              FPS8_endpoint,\n              headers\n            )\n            \n            expect(response8.statusCode).to.be.oneOf([201, 200])\n            expect(response8.body.createdAt).not.to.be.null\n            if (response8.statusCode == '200' || response8.statusCode == '201') {\n             \n              expect(response7.body.person_uuid).to.be.equal( response8.body[0].person_uuid,\"Check the person_uuid or fpd_is\");\n              expect(response7.body.tx_uuid).to.be.equal( response8.body[0].tx_uuid,\"Check the updated store_no\");\n              expect(response7.body.sbs_no).to.be.equal( response8.body[0].sbs_no,\"Check the updated sbs_no\");\n              expect(response7.body.store_no).to.be.equal( response8.body[0].store_no,\"Check the store_no\");\n              expect(response7.body.currency).to.be.equal( response8.body[0].currency,\"Check the updated currency\");\n              expect(response7.body.total_cost_aud).to.be.equal( response8.body[0].total_cost_aud,\"Check the updated total_cost_aud\");\n              expect(response7.body.status).to.be.equal( response8.body[0].status,\"Check the status\");\n              expect(response7.body.order_total).to.be.equal( response8.body[0].order_total,\"Check the order_total\");\n              \n              console.log(\n                '8 Returns the list of transaction related to a person-Completed'\n              )\n             \n              /*************************************10 Create transaction-PartialCancel**************** */\n                \n              let FPS10_endpoint =\n                '/transaction/by-source' +\n                '/' +\n                response8.body[0].source +\n                '/' +\n                response8.body[0].source_tx_id\n                  /**********************************10a create a new tx currency Hybris single item order************************************ */\n          if (FPSTestData['transaction'] == 'TxnItem 1') {\n             FPS10response = FPS10A_Build_Json(\n              response8.body[0].person_uuid,\n              FPSTestData['10_newsbs_no'],\n              FPSTestData['10_newstore_no'],\n              FPSTestData['10_newsource'],\n              response8.body[0].source_tx_id,\n              response8.body[0].tx_uuid,\n              FPSTestData['10_newcurrency'],\n              FPSTestData['10_newstatus'],\n              FPSTestData['10_isgift'],\n              FPSTestData['10_taxtype'],\n              response8.body[0].total_cost_aud\n            )\n          } else if (FPSTestData['transaction'] == 'TxnItem 2') {\n          /**********************************10b create a new tx currency Hybris 2 item order************************************ */\n           FPS10response = FPS10B_Build_Json(\n            response8.body[0].person_uuid,\n            FPSTestData['10_newsbs_no'],\n            FPSTestData['10_newstore_no'],\n            FPSTestData['10_newsource'],\n            response8.body[0].source_tx_id,\n            response8.body[0].tx_uuid,\n            FPSTestData['10_newcurrency'],\n            FPSTestData['10_newstatus'],\n            FPSTestData['10_isgift'],\n            FPSTestData['10_taxtype'],\n            response8.body[0].total_cost_aud\n          )\n          \n          } \n          else{\n             FPS10response = FPS10_Build_Json(\n              response8.body[0].person_uuid,\n              FPSTestData['10_newsbs_no'],\n              FPSTestData['10_newstore_no'],\n              FPSTestData['10_newsource'],\n              response8.body[0].source_tx_id,\n              response8.body[0].tx_uuid,\n              FPSTestData['10_newcurrency'],\n              FPSTestData['10_newstatus'],\n              FPSTestData['10_isgift'],\n              FPSTestData['10_qty'],\n              FPSTestData['10_taxtype'],\n              response8.body[0].total_cost_aud\n            )\n          }\n          console.log(FPS10response)\n          await sleep(2000);\n              const response10 = await patchRequest(\n                Common.URL.FPS,\n                FPS10_endpoint,\n                headers,\n                JSON.stringify(FPS10response)\n              )\n             \n              console.log(response10.text)\n              expect(response10.statusCode).to.be.oneOf([201, 200,202])\n              expect(response10.body.createdAt).not.to.be.null\n              if (\n                response10.statusCode == '200' ||\n                response10.statusCode == '201'||\n                response10.statusCode == '202'\n              ) {\n                console.log(\n                  '10 Create transaction-PartialCancel-Completed'\n                )\n                /*************************************11 Get the updated partial values**************** */\n                let FPS11_endpoint =\n                  '/transaction' + '/' + response8.body[0].tx_uuid\n                \n                const response11 = await getRequest(\n                  Common.URL.FPS,\n                  FPS11_endpoint,\n                  headers\n                )\n               \n                expect(response11.statusCode).to.be.oneOf([201, 200])\n                expect(response11.body.createdAt).not.to.be.null\n                if (\n                  response11.statusCode == '200' ||\n                  response11.statusCode == '201'\n                ) {\n                  console.log(response11.body);\n                  for (var index3=0 ; index3 < FPS10response.lines.length; index3++)\n                  {\n                  for (var i3 = 0; i3 < response11.body.lines.length; i3++)\n                  {   \n                    if  (response11.body.lines[i3].sku  == FPS10response.lines[index3].sku)\n                    {\n                    expect(response11.body.lines[i3].sku).to.be.equal(FPS10response.lines[index3].sku,\"Verify the cancelled SKU \");\n                    expect(response11.body.lines[i3].cancelled[0].shipping_cancelled).to.be.equal( FPS10response.lines[index3].cancelled[0].shipping_cancelled,\"Verify shipping_cancelled\");\n                    expect(response11.body.lines[i3].cancelled[0].qty_cancelled).to.be.equal( FPS10response.lines[index3].cancelled[0].qty_cancelled,\"Verify qty_cancelled\");\n                    break;\n                  }\n                  }\n                  }\n                  expect(response11.body.status).to.be.equal( FPSTestData['10_newstatus'],\"Verify the status value\");\n                  expect(response11.body.payments.length ).to.be.greaterThan( 0,\"Verify the payment type greater than 0\");\n                  expect(response11.body.sbs_no).to.be.equal( FPSTestData['10_newsbs_no'],\"Verify the sbs_no\");\n                  expect(response11.body.store_no).to.be.equal( FPSTestData['10_newstore_no'],\"Verify the store_no \");\n                  expect(response11.body.tx_uuid).to.be.equal( response8.body[0].tx_uuid,\"Verify the tx_uuid value\");\n                  \n                 \n                  console.log(\n                    '11 Get the updated partial values-completed'\n                  )\n                  \n                  /*************************************12 POST person event UNSUBSCRIBED - source:**************** */\n                  const FPS12response = FPS12_Build_Json(\n                    response11.body.person_uuid,\n                    FPSTestData['5_entity'],\n                    entity_id,\n                    response11.body.source\n                  )\n                  let FPS12_endpoint = '/person/events'\n                  const response12 = await postRequest(\n                    Common.URL.FPS,\n                    FPS12_endpoint,\n                    headers,\n                    JSON.stringify(FPS12response)\n                  )\n                  \n                  expect(response12.statusCode).to.be.oneOf([201, 200, 202])\n                  expect(response12.body.createdAt).not.to.be.null\n                  if (\n                    response12.statusCode == '200' ||\n                    response12.statusCode == '201' ||\n                    response12.statusCode == '202'\n                  ) {\n                    console.log(\n                      '12 POST person event UNSUBSCRIBED - source  completed'\n                    )\n                    /*************************************13 Get Person restricted optins details-false**************** */\n                    const response13 = await getRequest(\n                      Common.URL.FPS,\n                      FPS2_endpoint,\n                      headers\n                    )\n                    expect(response13.statusCode).to.be.oneOf([\n                      201,\n                      200\n                    ])\n                    expect(response13.body.createdAt).not.to.be.null\n                    if (\n                      response13.status == '201' ||\n                      response2.status == '200'\n                    ) {\n                      response_Value = response13.body\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].id).to.be.equal(response12.body.entity_id,\"Verify the optins id value exists\");\n                     // expect(response13.body.optins[FPSTestData['5_entity']][0].status).to.be.equal(false,\"Verify the optins status\");\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].reason).to.be.equal( response12.body.payload.reason,\"Verify the optins reason\");\n                      expect(response13.body.optins[FPSTestData['5_entity']][0].last_modified_source).to.be.equal( response12.body.source,\"VVerify the optins last_modified_source \");\n                      \n                      console.log(\n                        '13 Get Person restricted optins details-false-completed'\n                      )\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
              "err": {
                "message": "AssertionError: Check the updated sbs_no: expected 2 to equal 14",
                "estack": "AssertionError: Check the updated sbs_no: expected 2 to equal 14\n    at Context.<anonymous> (file:///C:/Users/THI2201882/source/BiFrost/tests/FPS.spec.js:296:53)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 2\n+ 14\n"
              },
              "uuid": "1e26a7ac-2b7d-46c2-8828-5270beb09c92",
              "parentUUID": "f18e39db-01ce-495d-bf55-2541ab051e15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff6e3adb-e736-43f5-b555-29c44b1ffdb4"
          ],
          "failures": [
            "1e26a7ac-2b7d-46c2-8828-5270beb09c92"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24810,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}