{
  "stats": {
    "suites": 7,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-30T12:33:37.527Z",
    "end": "2022-06-30T12:33:47.791Z",
    "duration": 10264,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "318c0137-6498-48ac-af0e-0cdb8d0e343c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
          "title": "Restful Booker API Tests",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\APIRequests.spec.js",
          "file": "\\tests\\APIRequests.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Restful Booker API Tests\"",
              "fullTitle": "Restful Booker API Tests \"before all\" hook in \"Restful Booker API Tests\"",
              "timedOut": false,
              "duration": 1121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n .post('/auth')\n .send(userauthdata)\n .set('Accept', 'application/json')\n .set('Content-Type', 'application/json')\n .end(function(err, res) {\n     expect(res.statusCode).to.be.equal(200);\n     expect(res.body.token).not.to.be.null;\n     token = res.body.token;\n     if (err) {\n         throw err;\n     }\n     done();\n });",
              "err": {},
              "uuid": "bdcb5d87-7274-412a-ad85-71d7cbb032ae",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the user is able to create the booking sucessfully",
              "fullTitle": "Restful Booker API Tests Verify the user is able to create the booking sucessfully",
              "timedOut": false,
              "duration": 957,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n            .post('/booking')\n            .send(booking)\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .end(function(err, res) {\n                expect(res.statusCode).to.be.equal(200);\n                expect(res.body.bookingid).not.to.be.null;\n                expect(res.body.booking.firstname).to.be.equal(booking.firstname);\n                expect(res.body.booking.lastname).to.be.equal(booking.lastname);\n                expect(res.body.booking.totalprice).to.be.equal(booking.totalprice);\n                expect(res.body.booking.depositpaid).to.be.equal(booking.depositpaid);\n                expect(res.body.booking.bookingdates.checkin).to.be.equal(booking.bookingdates.checkin);\n                expect(res.body.booking.bookingdates.checkout).to.be.equal(booking.bookingdates.checkout);\n                expect(res.body.booking.additionalneeds).to.be.equal(booking.additionalneeds);\n                bookingId = res.body.bookingid;\n                if (err) {\n                    throw err;\n                }\n                done();\n            });",
              "err": {},
              "uuid": "7cf1721a-d591-422b-8d8d-0d8cab536c87",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user is able to fetch the booking of the provided booking id",
              "fullTitle": "Restful Booker API Tests Verify the user is able to fetch the booking of the provided booking id",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n            .get('/booking/' + bookingId)\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .end(function(err, res) {\n                expect(res.statusCode).to.be.equal(200);\n                expect(res.body.firstname).to.be.equal(booking.firstname);\n                expect(res.body.lastname).to.be.equal(booking.lastname);\n                expect(res.body.totalprice).to.be.equal(booking.totalprice);\n                expect(res.body.depositpaid).to.be.equal(booking.depositpaid);\n                expect(res.body.bookingdates.checkin).to.be.equal(booking.bookingdates.checkin);\n                expect(res.body.bookingdates.checkout).to.be.equal(booking.bookingdates.checkout);\n                expect(res.body.additionalneeds).to.be.equal(booking.additionalneeds);\n                if (err) {\n                    throw err;\n                }\n                done();\n            });",
              "err": {},
              "uuid": "698dd749-3293-4365-b8cf-29ba9a8bf248",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user is able to update the booking of the provided booking id using Put request",
              "fullTitle": "Restful Booker API Tests Verify the user is able to update the booking of the provided booking id using Put request",
              "timedOut": false,
              "duration": 1006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n    .put('/booking/' + bookingId)\n    .send(updatedbooking)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Cookie', 'token=' + token)\n    .end(function(err, res) {\n        expect(res.statusCode).to.be.equal(200);\n        expect(res.body.firstname).to.be.equal(updatedbooking.firstname);\n        expect(res.body.lastname).to.be.equal(updatedbooking.lastname);\n        expect(res.body.totalprice).to.be.equal(updatedbooking.totalprice);\n        expect(res.body.depositpaid).to.be.equal(updatedbooking.depositpaid);\n        expect(res.body.bookingdates.checkin).to.be.equal(updatedbooking.bookingdates.checkin);\n        expect(res.body.bookingdates.checkout).to.be.equal(updatedbooking.bookingdates.checkout);\n        expect(res.body.additionalneeds).to.be.equal(updatedbooking.additionalneeds);\n        if (err) {\n            throw err;\n        }\n        done();\n    });",
              "err": {},
              "uuid": "41c1d8cd-622e-42b6-9508-ded1d7db4953",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user is able to update the firstname and lastname of booking of the provided booking id",
              "fullTitle": "Restful Booker API Tests Verify the user is able to update the firstname and lastname of booking of the provided booking id",
              "timedOut": false,
              "duration": 1071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var firstname = 'Michael';\nvar lastname = 'Trenor';\nrequest(baseurl)\n    .patch('/booking/' + bookingId)\n    .send({ firstname: firstname, lastname: lastname })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Cookie', 'token=' + token)\n    .end(function(err, res) {\n        expect(res.statusCode).to.be.equal(200);\n        expect(res.body.firstname).to.be.equal(firstname);\n        expect(res.body.lastname).to.be.equal(lastname);\n        expect(res.body.totalprice).to.be.equal(updatedbooking.totalprice);\n        expect(res.body.depositpaid).to.be.equal(updatedbooking.depositpaid);\n        expect(res.body.bookingdates.checkin).to.be.equal(updatedbooking.bookingdates.checkin);\n        expect(res.body.bookingdates.checkout).to.be.equal(updatedbooking.bookingdates.checkout);\n        expect(res.body.additionalneeds).to.be.equal(updatedbooking.additionalneeds);\n        if (err) {\n            throw err;\n        }\n        done();\n    });",
              "err": {},
              "uuid": "19dda72b-bc61-4a4a-9b02-3def2ea0c6b9",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user is able to  Delete the booking of the provided booking id",
              "fullTitle": "Restful Booker API Tests Verify the user is able to  Delete the booking of the provided booking id",
              "timedOut": false,
              "duration": 964,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n    .delete('/booking/' + bookingId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Cookie', 'token=' + token)\n    .end(function(err, res) {\n        expect(res.statusCode).to.be.equal(201);\n        if (err) {\n            throw err;\n        }\n        done();\n    });",
              "err": {},
              "uuid": "9f007abc-774d-4045-b9d2-988d8246dc1f",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the 404 status code for deleted booking id",
              "fullTitle": "Restful Booker API Tests Verify the 404 status code for deleted booking id",
              "timedOut": false,
              "duration": 977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n    .get('/booking/' + bookingId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .end(function(err, res) {\n        expect(res.statusCode).to.be.equal(404);\n        if (err) {\n            throw err;\n        }\n        done();\n    });",
              "err": {},
              "uuid": "98edf9dd-c81a-4877-98b5-82d9a0aabbe9",
              "parentUUID": "a592f088-a0e1-4f68-bd80-7c84b06c81ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7cf1721a-d591-422b-8d8d-0d8cab536c87",
            "698dd749-3293-4365-b8cf-29ba9a8bf248",
            "41c1d8cd-622e-42b6-9508-ded1d7db4953",
            "19dda72b-bc61-4a4a-9b02-3def2ea0c6b9",
            "9f007abc-774d-4045-b9d2-988d8246dc1f",
            "98edf9dd-c81a-4877-98b5-82d9a0aabbe9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5953,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "51dfa42b-48dd-4435-a1ea-7a7fa84432d6",
          "title": "Delete API tests using supertest",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\deleteRequest.spec.js",
          "file": "\\tests\\deleteRequest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the delete request is scuessfull",
              "fullTitle": "Delete API tests using supertest Verify the delete request is scuessfull",
              "timedOut": false,
              "duration": 521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.delete('/api/users/2')\n\t.set('Accept', 'application/json')\n\t.set('Content-Type', 'application/json')\n\t.end(function(err, res) {\n\t\texpect(res.statusCode).to.be.equal(204);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "cd916628-0d94-4d7e-ab57-20536bfc9c92",
              "parentUUID": "51dfa42b-48dd-4435-a1ea-7a7fa84432d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd916628-0d94-4d7e-ab57-20536bfc9c92"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 521,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f2e8c421-5c85-46d7-9ef2-b040e18265b1",
          "title": "Get API tests using supertest",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\getRequest.spec.js",
          "file": "\\tests\\getRequest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the user is able to  pass the test for get api with query param sucessfully ",
              "fullTitle": "Get API tests using supertest Verify the user is able to  pass the test for get api with query param sucessfully ",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.get('/api/users')\n\t.query({ page: '2' })\n\t.set('Accept', 'application/json')\n\t.set('Content-Type', 'application/json')\n\t.end(function (err, res) {\n\t\texpect(res.statusCode).to.be.equal(200);\n\t\texpect(res.body.page).to.be.equal(2);\n\t\texpect(res.body.data[0].id).to.be.equal(7);\n\t\texpect(res.body.data[0].first_name).to.be.equal('Michael');\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "91873c35-e82f-4494-9939-68a7557388ca",
              "parentUUID": "f2e8c421-5c85-46d7-9ef2-b040e18265b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user is able to pass the test for get api without query param  successfully",
              "fullTitle": "Get API tests using supertest Verify the user is able to pass the test for get api without query param  successfully",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.get('/api/users/2')\n\t.end(function (err, res) {\n\t\texpect(res.statusCode).to.be.equal(200);\n\t\texpect(res.body.data.id).to.be.equal(2);\n\t\texpect(res.body.data.first_name).to.be.equal('Janet');\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "81d3327e-df34-4cef-9844-ccdfc5adc9fb",
              "parentUUID": "f2e8c421-5c85-46d7-9ef2-b040e18265b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully pass the test for get api with path param",
              "fullTitle": "Get API tests using supertest should successfully pass the test for get api with path param",
              "timedOut": false,
              "duration": 864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let param = 1;\nrequest('https://fakerestapi.azurewebsites.net')\n\t.get('/api/v1/Authors/' + param)\n\t.end(function (err, res) {\n\t\texpect(res.statusCode).to.be.equal(200);\n\t\texpect(res.body.id).to.be.equal(1);\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "b1890af5-5705-4648-a283-ca4c0dcf8810",
              "parentUUID": "f2e8c421-5c85-46d7-9ef2-b040e18265b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91873c35-e82f-4494-9939-68a7557388ca",
            "81d3327e-df34-4cef-9844-ccdfc5adc9fb",
            "b1890af5-5705-4648-a283-ca4c0dcf8810"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1244,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e17ce988-1fe7-44f1-971c-c0463e777cde",
          "title": "Patch API tests using supertest",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\patchRequest.spec.js",
          "file": "\\tests\\patchRequest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the patch request is scuessfull",
              "fullTitle": "Patch API tests using supertest Verify the patch request is scuessfull",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.patch('/api/users/2')\n\t.send(patchdata)\n\t.set('Accept', 'application/json')\n\t.set('Content-Type', 'application/json')\n\t.end(function(err, res) {\n\t\texpect(res.statusCode).to.be.equal(200);\n\t\texpect(res.body.name).to.be.equal('Philip Allan');\n\t\texpect(res.body.job).to.be.equal('Quality Analyst');\n\t\texpect(res.body.updatedAt).not.to.be.null;\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "29a20b89-a85d-4892-beea-b2b318911c48",
              "parentUUID": "e17ce988-1fe7-44f1-971c-c0463e777cde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29a20b89-a85d-4892-beea-b2b318911c48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 466,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f7c440c9-f661-4649-8255-a513e78cdbe5",
          "title": "Post API tests using supertest",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\postRequest.spec.js",
          "file": "\\tests\\postRequest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the user is able to  pass the test for post api sucessfully",
              "fullTitle": "Post API tests using supertest Verify the user is able to  pass the test for post api sucessfully",
              "timedOut": false,
              "duration": 444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.post('/api/users')\n\t.send(userdata)\n\t.set('Accept', 'application/json')\n\t.set('Content-Type', 'application/json')\n\t.end(function(err, res) {\n\t\texpect(res.statusCode).to.be.equal(201);\n\t\texpect(res.body.name).to.be.equal('Abhirami Balasubramanian');\n\t\texpect(res.body.job).to.be.equal('QA');\n\t\texpect(res.body.id).not.to.be.null;\n\t\texpect(res.body.createdAt).not.to.be.null;\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "f6133c65-4a7c-43d4-865b-b5e5f4580430",
              "parentUUID": "f7c440c9-f661-4649-8255-a513e78cdbe5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6133c65-4a7c-43d4-865b-b5e5f4580430"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 444,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aadded7c-6017-4ab8-8f55-0a0c5148f962",
          "title": "Put API tests using supertest",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\putRequest.spec.js",
          "file": "\\tests\\putRequest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the put request is sucessfully ",
              "fullTitle": "Put API tests using supertest Verify the put request is sucessfully ",
              "timedOut": false,
              "duration": 469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseurl)\n\t.put('/api/users/2')\n\t.send(putdata)\n\t.set('Accept', 'application/json')\n\t.set('Content-Type', 'application/json')\n\t.end(function(err, res) {\n\t\texpect(res.statusCode).to.be.equal(200);\n\t\texpect(res.body.name).to.be.equal('Allan Philip');\n\t\texpect(res.body.job).to.be.equal('Business Analyst');\n\t\texpect(res.body.updatedAt).not.to.be.null;\n\t\tdone();\n\t});",
              "err": {},
              "uuid": "4e530ab1-4602-4cde-9ac7-750205b52c30",
              "parentUUID": "aadded7c-6017-4ab8-8f55-0a0c5148f962",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e530ab1-4602-4cde-9ac7-750205b52c30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f8c28f72-fa52-466a-9acd-e8f2864ba3b8",
          "title": "Update Existing Issues",
          "fullFile": "C:\\Users\\THI2201879\\OneDrive - Testhouse Limited\\Documents\\Workspace\\js_api\\api_bifrost\\BiFrost\\tests\\XRayAPI.spec.js",
          "file": "\\tests\\XRayAPI.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Update XRay Test Execution Results",
              "fullTitle": "Update Existing Issues Update XRay Test Execution Results",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var myXml = \"test-results.xml\";\n    var xmlContents = fs.readFileSync(myXml, 'utf8').toString();\n    //console.log(xmlContents);\n   // var xml = \"<?xml version='1.0'?><query><author>John Steinbeck</author></query>\";\n   //xmlhttp.send(xmlDoc);\n    request(baseurl)\n\t\t\t.post(xraypost.post)\n    .send(xmlContents)\n\t\t\t.set('Content-Type', 'text/xml')\n    //.attach('file',\"/assets/mochawesome-report.png\")\n    .set('Authorization','Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJqaXJhOjQwODhkNDllLTg5YTQtNDVhOS04NzljLWM5NjY5OWZkNThhNyIsImFjY291bnRJZCI6IjVmNTZjMDUwMTg5NDgyMDA3ZGZmZTg2MyIsImlzWGVhIjpmYWxzZSwiaWF0IjoxNjU2MzkyNTQzLCJleHAiOjE2NTY0Nzg5NDMsImF1ZCI6IjlBMDAyQzVBMzlGMDRERDk4QkFCNzg0QjRFNTM1RTVBIiwiaXNzIjoiY29tLnhwYW5kaXQucGx1Z2lucy54cmF5Iiwic3ViIjoiOUEwMDJDNUEzOUYwNEREOThCQUI3ODRCNEU1MzVFNUEifQ.bZIfBHmrDDjL--fwwqfAHzo9dJumM7cA--9qac_iw8E')\n\t\t\t//.expect(200);\n    /*.end(function(err, res){\n    console.log(res.statusCode);\n\t\t\texpect(res.statusCode).to.be.equal(200);\n\t\t\texpect(res.body.key).to.be.equal('QUA-6861');\n    done();*/\n   .end(function(err, res) {\n    expect(res.statusCode).to.be.equal(401);\n\t\t//\texpect(res.body.key).to.be.equal('QUA-6860');\n    if (err) {\n        throw err;\n    }\n    \n});\n\t\t\t\n  \n      \n      /*\n      var myXml = \"test-results.xml\";\n      var xmlDoc;\n      \n      var xmlContents = fs.readFileSync(myXml, 'utf8').toString();\nconsole.log(xmlContents);\nvar url = \"https://xray.cloud.xpand-it.com/api/v2/import/execution/junit?testExecKey=SQ-75\";\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', url,true);\n\nxhr.onload = function () {\n    console.log(\"Onload\" + xhr.status);\n    if (xhr.readyState === 4) {\n       \n        console.log(xhr.responseXML);\n        xmlDoc = xhr.responseXML;\n        console.log(xmlDoc);\n    }};;\nxhr.onreadystatechange = function () {\n    console.log(\"On ready State change\" + xhr.status);\nif (xhr.readyState === 4 && xhr.status == 200) {\n  \n    console.log(xhr.responseXML);\n    xmlDoc = xhr.responseXML;\n    console.log(xmlDoc);\n}};\nxhr.setRequestHeader(\"Content-Type\", \"text/xml\");\nxhr.setRequestHeader(\"Authorization\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJqaXJhOjQwODhkNDllLTg5YTQtNDVhOS04NzljLWM5NjY5OWZkNThhNyIsImFjY291bnRJZCI6IjVmNTZjMDUwMTg5NDgyMDA3ZGZmZTg2MyIsImlzWGVhIjpmYWxzZSwiaWF0IjoxNjU2MzkyNTQzLCJleHAiOjE2NTY0Nzg5NDMsImF1ZCI6IjlBMDAyQzVBMzlGMDRERDk4QkFCNzg0QjRFNTM1RTVBIiwiaXNzIjoiY29tLnhwYW5kaXQucGx1Z2lucy54cmF5Iiwic3ViIjoiOUEwMDJDNUEzOUYwNEREOThCQUI3ODRCNEU1MzVFNUEifQ.bZIfBHmrDDjL--fwwqfAHzo9dJumM7cA--9qac_iw8E\");\n       \n//var data = \"@C:\\Users\\THI2201882\\source\\BiFrost\\test-results.xml\";\n       \n       //var doc = new parser.parseFromString(xmlContents, 'application/xml');\n\n       // xhr.send(xmlContents);\nxhr.send(xmlDoc);\n\t\t\n\t});*/",
              "err": {},
              "uuid": "b35278fb-998f-4114-af96-c88456faa8a7",
              "parentUUID": "f8c28f72-fa52-466a-9acd-e8f2864ba3b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b35278fb-998f-4114-af96-c88456faa8a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}